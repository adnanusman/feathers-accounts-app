import React, {Component} from 'react';
import Chart from 'chart.js';
import Accounting from 'accounting';
import {months} from './../helpers/months.js'; 

class Stats extends Component {
  constructor(props) {
    super(props);

    this.client = this.props.client;
    this.userId = this.props.userId;

    this.renderCharts = this.renderCharts.bind(this);
    this.renderCatChart = this.renderCatChart.bind(this);
    this.renderSrcChart = this.renderSrcChart.bind(this);
    this.getEntries = this.getEntries.bind(this);
    this.getCategories = this.getCategories.bind(this);
    this.getSources = this.getSources.bind(this);

    this.months = months;
  }

  componentWillMount() {
    this.getEntries();
    this.getCategories();
    this.getSources();
  }

  async getEntries() {
    let income = [];
    let expense = [];

    await this.client.service('entries')
      .find({
        query: {
          personId: {
            $eq: this.userId
          }
        }
      })
      .then(response => {
        this.entries = response;

        return response.data.map(entry => {
          let type = entry.type;
          // get the month.. returns 0 - 11
          let month = new Date(entry.createdAt).getMonth();
          let amount = +entry.amount;

          // create array with 12 months income/expenses consolidated into one amount per month.
          for(var i = 0; i < 12; i++) {
            if(month === i) {
              if(type === 'Income') {
                if(income[i] === undefined) {
                  income[i] = amount;
                } else {
                  income[i] = income[i] + amount;
                }
              } else {
                if(expense[i] === undefined) {
                  expense[i] = amount;
                } else {
                  expense[i] = expense[i] + amount;
                }
              }
            } else {
              // if no income or expense for that month, mark it as 0
              if(income[i] === undefined) {
                income[i] = 0;
              }

              if(expense[i] === undefined) {
                expense[i] = 0;
              }
            }
          }
        })
      })
      
      this.renderCharts({income, expense});
  }

  async getCategories() {
    await this.client.service('categories')
      .find({
        query: {
          personId: {
            $eq: this.userId
          }
        }
      })
      .then(response => {
        this.categories = response.data.map(category => {
          return {
            id: category.id, 
            title: category.title
          }
        })

        this.renderCatChart(this.entries, this.categories);    
      })
  }

  async getSources() {
    await this.client.service('source')
      .find({
        query: {
          personId: {
            $eq: this.userId
          }
        }
      })
      .then(response => {
        this.sources = response.data.map(source => {
          return {
            id: source.id, 
            title: source.title
          }
        })

        this.renderSrcChart(this.entries, this.sources);
      })
  }

  renderCharts(data) {   
    var ctx = document.getElementById("ieChart").getContext('2d');
    var ieChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: this.months,
            datasets: [{
                label: 'Income',
                data: data.income,
                borderColor: 'rgba(75, 150, 192, 1)',
                backgroundColor: 'rgba(75, 150, 192, 0.4)',
            },
            {
                label: 'Expenses',
                data: data.expense,
                borderColor: '#650000',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
            }
          ]
        },
        options: {            
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            return Accounting.formatMoney(value, '$', 0);
                        }
                    }
                }]
            }
        },
    });
  }

  renderCatChart(entries, categories) {
    const categoryData = [];

    // extract the amount of income generated by each category as an array
    categories.forEach((category, index) => {
      entries.data.map(entry => {
        if(entry.categoryId === category.id) {
          if(categoryData[index] === undefined) {
            categoryData[index] = +entry.amount;
          } else {
            categoryData[index] = categoryData[index] + +entry.amount;
          }
        }
      })
    })

    var categoriesCTX = document.getElementById("categoriesChart").getContext('2d');
    var categoriesChart = new Chart(categoriesCTX, {
      type: 'bar',
      data: {
          labels: categories.map(category => {
            return category.title;
          }),
          datasets: [{
              label: 'Income',
              data: categoryData,
              borderColor: 'rgba(75, 150, 192, 1)',
              backgroundColor: 'rgba(75, 150, 192, 0.4)',
          }
        ]
      },
      options: {            
          scales: {
              yAxes: [{
                  ticks: {
                      beginAtZero: true,
                      callback: function(value, index, values) {
                          return Accounting.formatMoney(value, '$', 0);
                      }
                  }
              }]
          }
      },
    });

  }

  renderSrcChart(entries, sources) {
    const sourceData = [];

    // extract the amount of expense done by each source as an array
    sources.forEach((source, index) => {
      entries.data.map(entry => {
        if(+entry.source === source.id) {
          if(sourceData[index] === undefined) {
            sourceData[index] = +entry.amount;
          } else {
            sourceData[index] = sourceData[index] + +entry.amount;
          }
        }
      })
    })

    var sourcesCTX = document.getElementById("sourcesChart").getContext('2d');
    var sourceChart = new Chart(sourcesCTX, {
      type: 'bar',
      data: {
          labels: this.sources.map(source => {
            return source.title;
          }),
          datasets: [{
              label: 'Expenses',
              data: sourceData,
              borderColor: '#650000',
              backgroundColor: 'rgba(255, 0, 0, 0.2)',
          }
        ]
      },
      options: {            
          scales: {
              yAxes: [{
                  ticks: {
                      beginAtZero: true,
                      callback: function(value, index, values) {
                          return Accounting.formatMoney(value, '$', 0);
                      }
                  }
              }]
          }
      },
    });
  }

  render() {
    return (
      <div className="flex-container">
        <h1 className="centered-flex">
          Income/Expense Chart
        </h1>
        
        <canvas id="ieChart"></canvas>
        <div className="column-container">
          <div className="one-half centered-flex">
            <div className="full-width">
              <h2>Income by Category</h2>

              <canvas id="categoriesChart"></canvas>
            </div>
          </div>
          <div className="one-half centered-flex">
            <div className="full-width">
              <h2>Expense by Source</h2>

              <canvas id="sourcesChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

export default Stats;